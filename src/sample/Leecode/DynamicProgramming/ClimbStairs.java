package sample.Leecode.DynamicProgramming;

/**
 * @Author: liutianxin
 * @Description
 * @Date: Created in 10:40 2019/11/28
 * @MOdified By:
 * <p>
 * 假设你正在爬楼梯。需要n阶才能爬上楼顶。
 * 每次你可以爬1或者2个台阶，你有多少种不同的方法可以爬上楼顶呢？
 * 注意：n为正整数
 * <p>
 * 假设你正在爬楼梯。需要n阶才能爬上楼顶。
 * 每次你可以爬1或者2个台阶，你有多少种不同的方法可以爬上楼顶呢？
 * 注意：n为正整数
 * <p>
 * 假设你正在爬楼梯。需要n阶才能爬上楼顶。
 * 每次你可以爬1或者2个台阶，你有多少种不同的方法可以爬上楼顶呢？
 * 注意：n为正整数
 * <p>
 * 假设你正在爬楼梯。需要n阶才能爬上楼顶。
 * 每次你可以爬1或者2个台阶，你有多少种不同的方法可以爬上楼顶呢？
 * 注意：n为正整数
 */

/**
 * 假设你正在爬楼梯。需要n阶才能爬上楼顶。
 * 每次你可以爬1或者2个台阶，你有多少种不同的方法可以爬上楼顶呢？
 *注意：n为正整数
 */

/**
 * 四步分析法：
 *  1.问题拆解：
 *      我们到达n个楼梯可以从第n-1个楼梯和第n-2个楼梯到达，因此第n个问题可以拆分为两个问题，
 *      从第n-1个台阶到达第n个台阶和从第n-2个台阶到达第n个台阶。这样问题有可以继续往下拆分，
 *      直到第0个台阶
 *
 *  2.状态定义：
 *      问题拆解中已经提到，第n个楼梯会和第n-1和第n-2个楼梯有关联，第n-1个问题的答案，其实是从起点到达第n-1
 *      个楼梯的路径总数，n-2同理，从第n-1个楼梯到达n和从第n-2个楼梯到达n，属于不同的路径 ，因此，可以把第i个
 *      状态定义为“从起点到达第i个楼梯路径的总数”，状态之间的联系是通过加法联系起来的
 *
 *   3.递推方程：
 *      “状态定义”中已经定义好了状态，也知道第i个状态可以由第i-1个状态和第i-2个状态相加得到，因此递推方程就是：
 *      dp[i] = dp[i-1] + dp[i-2]
 *
 *   4.实现
 *      从递推方程可以看出，需要一个初始值来开始计算，其实位置不需要移动: dp[0] = 0
 *      第一层楼梯只能由0层到达：dp[1] = 1;第二层楼梯可以由0层上两个阶梯到达，也可以由0层上到1层，
 *      然后再到2层阶梯到达：dp[2] = 2
 */
public class ClimbStairs {

    public Integer climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;

        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }

    public static void main(String[] args) {
        System.out.println(new ClimbStairs().climbStairs(20));
    }

}
